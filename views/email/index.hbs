<h2>Bulk Emailer</h2>

{{#if success}}
<div class="alert alert-success text-center">Message sent successfully</div>
{{/if}}

{{#if error}}
<div class="alert alert-danger text-center">An error occurred. Please try again</div>
{{/if}}

<div class="alert alert-warning text-center d-lg-none">This page is intended for use on desktop devices and might not play well with mobile devices - <strong>use at your own peril!</strong></div>

<div id="app">
	<form method="post" id="emailForm">
		<div class="card mb-3">
			<div class="card-body">
				<h3 class="mb-3">Recipients</h3>
				<button type="button" class="btn btn-lg btn-default mb-3" data-bs-toggle="modal"
					data-bs-target="#recipientModal" v-on:click="loadMembers">+ Add</button>

				<div class="d-block">
					<span class="badge bg-secondary fs-5 me-1" v-for="recipient in recipients">
						${recipient.DisplayName}

						<span v-on:click="removeRecipient(recipient.MembershipID)">&times;</span>

						<input type="hidden" name="membership[]" :value="recipient.MembershipID" />
					</span>
				</div>
			</div>
		</div>

		<div class="card card-body mb-3">
			<h3>Message Details</h3>

			<div class="form-group mb-3">
				<label for="sender">From</label>
				<input id="sender" name="sender" type="text" class="form-control" readonly
					value="{{session.user.Email}}" />
			</div>

			<div class="form-group mb-3">
				<label for="subject">Subject</label>
				<input id="subject" name="subject" type="text" class="form-control" required value="{{subject}}" />
			</div>

			<div class="form-group">
				<label for="message">Message</label>
				<textarea id="message" name="message" class="form-control" rows="7" required>{{message}}</textarea>
				<div class="alert alert-danger text-center" v-if="messageLength <= 0">You must enter a message!</div>
			</div>
		</div>

		<div class="text-center">
			<button type="button" class="btn btn-success btn-lg mx-3" v-on:click="sendTest">Send Test Email</button>
			<button type="button" class="btn btn-default btn-lg mx-3" v-on:click="sendLive">Send Live Email</button>
		</div>
	</form>

	<div class="modal fade" id="recipientModal" tabindex="-1" aria-hidden="true">
		<div class="modal-dialog modal-lg">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">Add Recipients</h5>
					<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
				</div>
				<div class="modal-body">
					<div class="form-group">
						<label for="m-type">Membership Type</label>
						<select id="m-type" class="form-control" v-model="membershipType" v-on:change="loadMembers">
							<option value="*">All</option>
							{{#each types}}
							<option value="{{id}}">{{Name}}</option>
							{{/each}}
						</select>
					</div>

					<hr />

					<div class="text-center my-3" v-if="isLoading">
						<span class="fst-italic">Loading...</span>
						<div class="spinner-border" role="status">
							<span class="visually-hidden">Loading...</span>
						</div>
					</div>

					<div v-if="!isLoading">
						<button type="button" class="btn btn-default mb-3" v-on:click="selectAll">Select All</button>

						<div class="list-group">
							<label class="list-group-item" v-for="result in results"
								:class="{disabled: !result.IsSelectable}">
								<input type="checkbox" class="form-check-input me-1"
									v-model="result.IsSelected" />${result.DisplayName}
							</label>
						</div>
					</div>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
					<button type="button" class="btn btn-default" data-bs-dismiss="modal" v-on:click="addRecipients">Add
						Recipients</button>
				</div>
			</div>
		</div>
	</div>
</div>

<script src="/js/vue.js"></script>
<script src="/js/tinymce.min.js"></script>
<script src="/js/swal2.js"></script>
<script>
	const season = {{ season }};

	//take field names and generate camelCase and display object
	const customFields = ['First Name', 'Last Name', 'Band Name'].map(f => {
		const fieldName = f.split(' ').reduce((str, w, i) => {
			if (i === 1)
				str = str.toLowerCase();

			return str + `${w.slice(0, 1).toUpperCase()}${w.slice(1).toLowerCase()}`;
		});

		return {
			id: fieldName,
			display: f
		};
	});

	tinymce.init({
		selector: '#message',
		plugins: 'autolink lists advlist link preview code wordcount',
		toolbar_mode: 'floating',
		menubar: 'file edit view insert tools format custom',
		contextmenu: 'link lists table',
		menu: {
			custom: {
				title: 'Add Data Field',
				items: customFields.map(f => f.id).join(' ')
			}
		},
		setup: (editor) => {
			editor.on('change', editor.save);

			customFields.forEach(e => {
				editor.ui.registry.addMenuItem(e.id, {
					text: `Recipient ${e.display}`,
					onAction: () => editor.insertContent(`\{${e.id}\}`)
				});
			})
		}
	});

	const app = new Vue({
		delimiters: ['${', '}'],
		el: '#app',
		data: {
			recipients: [],
			results: [],
			membershipType: '*',
			isLoading: false,
			messageLength: 1
		},
		methods: {
			loadMembers: function () {
				this.results = [];
				this.isLoading = true;

				let url = `/_api/membership/${season}`;
				if (this.membershipType != '*') {
					url += `?type=${this.membershipType}`;
				}

				fetch(url)
					.then(res => res.json())
					.then(json => {
						this.results = json.map(j => {
							return {
								MembershipID: j.id,
								DisplayName: j.Name,
								IsSelected: false,
								IsSelectable: !this.recipients.some(r => r.MembershipID === j.id)
							}
						});

						this.isLoading = false;
					});
			},

			addRecipients: function () {
				this.recipients = this.recipients.concat(this.results.filter(r => r.IsSelected));
			},

			removeRecipient: function (membershipID) {
				this.recipients = this.recipients.filter(r => r.MembershipID !== membershipID);
			},

			selectAll: function () {
				this.results.forEach(r => r.IsSelected = true);
			},

			sendTest: function () {
				const form = document.getElementById('emailForm');
				const content = tinymce.activeEditor.getContent().trim();
				this.messageLength = content.length;

				if (form.reportValidity() && this.messageLength > 0) {
					Swal.fire({
						icon: 'question',
						title: 'SEND TEST EMAIL?',
						text: 'Send a preview of this email to {{session.user.Email}}?',
						showCancelButton: true
					}).then(res => {
						if (res.isConfirmed) {
							form.action = "test";
							form.submit();
						}
					});
				}
			},

			sendLive: function () {
				const form = document.getElementById('emailForm');
				const content = tinymce.activeEditor.getContent().trim();
				this.messageLength = content.length;

				if (form.reportValidity() && this.messageLength > 0) {
					Swal.fire({
						icon: 'question',
						title: 'SEND EMAIL?',
						text: `Are you sure you wish to send this message to all ${this.recipients.length} members? You will not be able to cancel this once sent.`,
						showCancelButton: true
					}).then(res => {
						if (res.isConfirmed) {
							form.action = "send";
							form.submit();
						}
					});
				}
			}
		}
	});
</script>