<div id="app">
	<h2>${event?.name}</h2>

	<div class='alert alert-success text-center' v-if="saved">Changes saved successfully!</div>

	<div class="alert alert-danger text-center" v-if="errors.length > 0">
		<p>Please fix the following errors:</p>
		<ul>
			<li v-for="error in errors">${error}</li>
		</ul>
	</div>

	<div v-if="event != null">

		<div class="row row-cols-5 mb-3 d-none d-lg-flex">
			<div class="col" v-for="(status, i) in statuses">
				<div class="card card-body text-center h4 header h-100" :class="{'text-bg-success' : i < selectedStatusIndex, 'text-bg-primary' : i == selectedStatusIndex, 'disabled': !canEdit}" @click="setStatus(status)">${status}</div>
			</div>
		</div>

		<div class='form-group mb-3 d-lg-none'>
			<label class='form-label' for='status'>Status</label>
			<select id="status" name="status" class="form-control" v-model="event.status" :disabled="!canEdit">
				<option v-for="(status, i) in statuses" :value="status.toLowerCase()">${status}</option>
			</select>
		</div>

		<div class='card card-body mb-3'>
			<h3 class='text-center'>Event Details</h3>
			<form method='post' @submit.prevent="save">
				<div class="row row-cols-1 row-cols-lg-2">
					<div class='col form-group mb-3'>
						<label class='form-label' for='name'>Name</label>
						<input type='text' class='form-control' id='name' name='name' placeholder='Name' v-model='event.name' maxlength="255" required :disabled="!canEdit"/>
					</div>

					<div class='col form-group mb-3'>
						<label class='form-label' for='date'>Date</label>
						<input type='date' class='form-control' id='date' name='date' placeholder='Date' v-model='event.date' required :disabled="!canEdit"/>
					</div>
				</div>

				<div class='row row-cols-1 row-cols-lg-2'>
					<div class='col form-group mb-3'>
						<label class='form-label' for='start'>Start</label>
						<input type='time' class='form-control' id='start' name='start' v-model="event.startTime" :disabled="!canEdit"/>
					</div>
					<div class='col form-group mb-3'>
						<label class='form-label' for='end'>End Time</label>
						<input type='time' class='form-control' id='end' name='end' v-model="event.endTime" :disabled="!canEdit"/>
					</div>
				</div>

				<div class="card card-body mb-3">
					<h3>Address</h3>
					<div class="form-group mb-3">
						<label class="form-label" for="lineOne">Address Line 1</label>
						<input type="text" class="form-control" id="lineOne" name="lineOne" maxlength="100" placeholder="Address Line 1" v-model="event.address.line1" :disabled="!canEdit"/>
					</div>

					<div class="form-group mb-3">
						<label class="form-label" for="lineTwo">Address Line 2</label>
						<input type="text" class="form-control" id="lineTwo" name="lineTwo" maxlength="100" placeholder="Address Line 2" v-model="event.address.line2" :disabled="!canEdit"/>
					</div>

					<div class="form-group mb-3">
						<label class="form-label" for="city">Town/City</label>
						<input type="text" class="form-control" id="city" name="city" maxlength="100" placeholder="Town/City" v-model="event.address.townCity" :disabled="!canEdit"/>
					</div>

					<div class="form-group mb-3">
						<label class="form-label" for="postcode">Postcode</label>
						<input type="text" class="form-control" id="postcode" name="postcode" maxlength="10" placeholder="Postcode" v-model="event.address.postcode" :disabled="!canEdit"/>
					</div>

				</div>

				<div class='text-center' v-if="canEdit">
					<button class='btn btn-default'>Save</button>
				</div>
			</form>
		</div>
	</div>
</div>

<script src="/js/vue.js"></script>
<script src="/js/byba-sdk.js"></script>
<script>
	const app = new Vue({
		delimiters: ['${', '}'],
		el: '#app',
		data: {
			event: null,
			saved: false,
			statuses: ["Draft", "Internal", "Announced", "Finalised", "Complete"],
			selectedStatusIndex: -1,
			errors: [],
			canEdit: byba.amAdmin() || byba.creator(this.event)
		},
		mounted: function () {
			byba.events.get('{{id}}')
				.then(({json}) => {
					this.event = json;
					this.event.date = this.getDate(this.event.date);
					this.selectedStatusIndex = this.statuses.findIndex(s => s.toLowerCase() === this.event.status);

					document.title = document.title.replace("Loading...", json.name);
				});
		},
		methods: {
			getDate: function (rawDate) {
				const date = new Date(rawDate);
				return [date.getFullYear(), (date.getMonth() + 1).toString().padStart(2, "0"), date.getDate().toString().padStart(2, "0")].join("-");
			},
			setStatus: function (status) {
				if(!this.canEdit){
					return;
				}

				this.event.status = status.toLowerCase();
				this.selectedStatusIndex = this.statuses.findIndex(s => s.toLowerCase() === this.event.status);
			},
			save: function () {
				this.saved = false;
				if (!this.validate()) {
					window.scrollTo({
						top: 0,
						behavior: 'smooth'
					});
					return false;
				}

				byba.events.update("{{id}}", this.event).then(response => {
					if (response.status === 200) {
						return;
					}

					this.errors = response.json.errors.flatMap(e => {
						if (e.data) {
							return e.data.map(d => `${d.field} is invalid: ${d.message}`);
						}
						return e.message;
					});
					window.scrollTo({
						top: 0,
						behavior: 'smooth'
					});
				})
			},
			validate: function () {
				this.errors = [];

				if(!this.canEdit){
					this.errors.push("You do not have permission to edit this event");
					return false;
				}

				if (this.event.status == "draft") {
					return true;
				}

				if (this.event.name.trim() === "") {
					this.errors.push("You must enter a name for this event");
				} else if (isNaN(new Date(this.event.date))) {
					this.errors.push("You must enter a valid date for this event");
				} else if (this.event.status === "internal") {
					return true;
				}

				if (this.event.address?.line1?.trim() === "") {
					this.errors.push("You must enter the first line of the address for this event");
				} else if (this.event.address?.townCity?.trim() === "") {
					this.errors.push("You must enter the town for this event");
				} else if (this.event.address?.postcode?.trim() === "") {
					this.errors.push("You must enter the postcode for this event");
				} else if (this.event.status === "announced" && this.errors.length === 0) {
					return true;
				}

				//TODO - we don't have schedule or score functionality yet
				if (["finalised", "complete"].includes(this.event.status)) {
					this.errors.push(`"${this.event.status}" status is not currently supported`);
				}

				return false;
			}
		}
	});
</script>