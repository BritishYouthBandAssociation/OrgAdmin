<h2>Create Event Schedule</h2>
<p class="mb-3"><a href="../">&lt; back to {{event.Name}}</a></p>

<div id="app">
	<button class="btn btn-success mb-3 btn-lg" @click="addItem">+ Add</button>

	<div class="card card-body bg-default text-center text-light fs-3">
		{{time event.Start}}: Event Start
	</div>

	<div class="schedule-item" v-for="(item, index) in items" :key="item.id" :id="'item-' + item.id">
		<div class="event-spacer"></div>

		<div class="card card-body bg-dark text-light">
			<div class="row mb-3">
				<div class="col-12 col-lg-3 mb-3">
					<label :for="'start-' + index">Start Time</label>
					<input type="time" :id="'start-' + index" class="form-control" v-model="item.Start"
						@change="updateTimes(index)" required />
				</div>

				<div class="col-12 col-lg-6 mb-3">
					<label :for="'name-' + index">Description</label>
					<input type="text" :id="'name-' + index" class="form-control" v-model="item.Description" required />
				</div>

				<div class="col-12 col-lg-3 mb-3">
					<p :for="'duration-' + index">Duration <small>(minutes)</small></p>
					<span class="text-light">${item.duration}</span>
					<input type="hidden" name="dur[]" :value="item.duration" />
				</div>
			</div>
		</div>
	</div>

	<div class="event-spacer"></div>

	<div class="card card-body bg-default text-center text-light fs-3">
		{{time event.End}}: Event End
	</div>

</div>

<script src="/js/vue.js"></script>
<script>
	let id = -1;

	const app = new Vue({
		el: '#app',
		delimiters: ['${', '}'],
		data: {
			event: {{{ json event }}},
	items: []
		},
	methods: {
		addItem: function() {
			const index = this.items.length;
			this.items.push({
				id: --id,
				Start: index === 0 ? new Date(this.event.Start).toTimeString().substring(0, 5) : '',
				Description: ''
			});


			this.updateTimes(index);

			Vue.nextTick(() => {
				scroll();
			});
		},
		updateTimes(index){
			this.calcDuration(index);

			if (index > 0) {
				this.calcDuration(index - 1);
			}
		},

		calcDuration(index){
			const item = doTime(new Date(this.event.Start), this.items[index].Start);
			let next = new Date(this.event.End);

			if (index + 1 < this.items.length) {
				next = doTime(next, this.items[index + 1].Start);
			}

			const mins = Math.abs(Math.round(((next - item) / 1000) / 60));
			Vue.set(this.items[index], 'duration', mins);
			return mins;
		}
	}
	});

	function doTime(date, time) {
		const parts = time.split(":");
		if (parts.length !== 2) {
			return date;
		}

		date.setHours(parts[0]);
		date.setMinutes(parts[1]);
		date.setSeconds(0);

		return date;
	}

	function scroll() {
		const el = document.getElementById(`item-${id}`);
		const rect = el.getBoundingClientRect();
		if(!(rect.top >= 0 && rect.left >= 0 &&
			rect.bottom <= (window.innerHeight || document.documentElement.clientHeight)
			&& rect.right <= (window.innerWidth || document.documentElement.clientWidth)
		)){
			el.scrollIntoView({
				behavior: 'smooth'
			});
		}
	}
</script>