<h2>Create Event Schedule</h2>
<p class="mb-3"><a href="../">&lt; back to {{event.Name}}</a></p>

{{#if saved}}
	<div class="alert alert-success text-center">Schedule saved successfully!</div>
{{/if}}

<div id="app">
	{{#if session.user.IsAdmin}}
		<button class="btn btn-success mb-3 btn-lg" @click="addItem">+ Add</button>
		<button class="btn btn-default mb-3 btn-lg" @click="autoAssign">Auto-assign</button>

		<form method="post">
	{{/if}}
	<div class="card card-body bg-default text-center text-light fs-3">
		{{time event.Start}}: Event Start
	</div>

	<div class="schedule-item" v-for="(item, index) in items" :key="item.id" :id="'item-' + item.id">
		<div class="event-spacer"></div>

		<div class="card bg-dark text-light">
			<div class="card-header">
				<button type="button" class="btn-close btn-close-white d-block ms-auto" aria-label="Delete"
					@click="remove(index)"></button>
			</div>
			<div class="card-body">
				<div class="row">
					<div class="col-12 col-lg-3 mb-3">
						<label :for="'start-' + index">Start Time</label>
						<input type="time" name="start[]" :id="'start-' + index" class="form-control"
							v-model="item.Start" @change="updateTimes(index)" required />
					</div>

					<div class="col-12 col-lg-6 mb-3">
						<label :for="'name-' + index">Description</label>
						<input type="text" name="name[]" :id="'name-' + index" class="form-control"
							v-model="item.Description" required />
					</div>

					<div class="col-12 col-lg-3 mb-3">
						<p :for="'duration-' + index">Duration</p>
						<span class="text-light">${friendlyDuration(item.Duration)}</span>
						<input type="hidden" name="dur[]" :value="item.Duration" />
					</div>
				</div>

				<div class="alert alert-warning text-center mt-3" v-if="item.invalid">This schedule item falls
					outside the time the event is running. Please double-check the assigned time before proceeding.
				</div>
				<div class="alert alert-danger text-center mt-3" v-if="item.Duration === 0">This schedule item is at
					the same time as the next item</div>
			</div>
		</div>
	</div>

	<div class="event-spacer"></div>

	<div class="card card-body bg-default text-center text-light fs-3 mb-3">
		{{time event.End}}: Event End
	</div>

	{{#if session.user.IsAdmin}}
		<button class="btn btn-lg btn-default">Save</button>
		</form>
	{{/if}}

	<div class="modal fade" id="divisionModal" tabindex="-1" aria-hidden="true">
		<div class="modal-dialog modal-lg">
			<div class="modal-content">
				<div class="modal-header">
					<h2 class="modal-title fs-4">Schedule Config</h2>
					<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
				</div>
				<div class="modal-body">
					<h3 class="fs-5">Generation Type</h3>
					<input type="radio" class="btn-check" name="options" id="randomGen" autocomplete="off" value="random" v-model="generationType">
<label class="btn btn-outline-success" for="randomGen">Random</label>

<input type="radio" class="btn-check" name="options" id="leagueGen" autocomplete="off" value="league" v-model="generationType">
<label class="btn btn-outline-success" for="leagueGen">League Score</label>

<input type="radio" class="btn-check" name="options" id="entryGen" autocomplete="off" value="entry" v-model="generationType">
<label class="btn btn-outline-success" for="entryGen">Entry Order</label>
					<hr />
					<h3 class="fs-5">Division Order</h3>
					<div class="list-group">
						<div class="list-group-item fs-5" v-for="(division, index) in divisions" :key="division.id">
							<div class="row">
								<div class="col-10">${index + 1}. ${division.Name}</div>
								<div class="col-1">
									<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-arrow-up-square-fill pointer" viewBox="0 0 16 16" v-if="index > 0" @click="changeDivision(index, -1)">
										<path d="M2 16a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2zm6.5-4.5V5.707l2.146 2.147a.5.5 0 0 0 .708-.708l-3-3a.5.5 0 0 0-.708 0l-3 3a.5.5 0 1 0 .708.708L7.5 5.707V11.5a.5.5 0 0 0 1 0z" />
									</svg>

									<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-arrow-up-square opacity-50" viewBox="0 0 16 16" v-if="index === 0">
										<path fill-rule="evenodd" d="M15 2a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2zM0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2zm8.5 9.5a.5.5 0 0 1-1 0V5.707L5.354 7.854a.5.5 0 1 1-.708-.708l3-3a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 5.707V11.5z" />
									</svg>
								</div>
								<div class="col-1">
									<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-arrow-down-square-fill pointer" viewBox="0 0 16 16" v-if="index < divisions.length - 1" @click="changeDivision(index, 1)">
										<path d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2zm6.5 4.5v5.793l2.146-2.147a.5.5 0 0 1 .708.708l-3 3a.5.5 0 0 1-.708 0l-3-3a.5.5 0 1 1 .708-.708L7.5 10.293V4.5a.5.5 0 0 1 1 0z" />
									</svg>

									<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-arrow-down-square opacity-50" viewBox="0 0 16 16" v-if="index >= divisions.length - 1">
										<path fill-rule="evenodd" d="M15 2a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2zM0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2zm8.5 2.5a.5.5 0 0 0-1 0v5.793L5.354 8.146a.5.5 0 1 0-.708.708l3 3a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V4.5z" />
									</svg>
								</div>
							</div>
						</div>
					</div>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
					<button type="button" class="btn btn-default" data-bs-dismiss="modal" @click="generateSchedule">Generate Schedule</button>
				</div>
			</div>
		</div>
	</div>
</div>

<script src="/js/bootstrap.min.js"></script>
<script src="/js/vue.js"></script>
<script src="/js/swal2.js"></script>
<script>
	let id = -1;

	const app = new Vue({
		el: '#app',
		delimiters: ['${', '}'],
		data: {
			event: {{{ json event }}},
	items: {{{ json event.EventSchedules }}},
	start: null,
		end: null,
			entries: { },
			divisions: [],
	modal: null,
	generationType: 'random'
		},
	methods: {
		addItem: function() {
			const index = this.items.length;
			this.items.push({
				id: --id,
				Start: index === 0 ? new Date(this.event.Start).toTimeString().substring(0, 5) : '',
				Description: ''
			});


			this.updateTimes(index);

			Vue.nextTick(() => {
				scroll();
			});
		},
		updateTimes(index){
			if (index >= this.items.length || index < 0) {
				return;
			}

			this.calcDuration(index);

			if (index > 0) {
				this.calcDuration(index - 1);
			}
		},

		calcDuration(index){
			const item = doTime(new Date(this.event.Start), this.items[index].Start);
			let next = new Date(this.event.End);

			if (index + 1 < this.items.length) {
				next = doTime(next, this.items[index + 1].Start);
			}

			const mins = Math.abs(Math.round(((next - item) / 1000) / 60));
			Vue.set(this.items[index], 'Duration', mins);

			Vue.set(this.items[index], 'invalid', (item < this.start || item > this.end));

			return mins;
		},

		friendlyDuration(minutes){
			const mins = minutes % 60;
			const hours = Math.floor(minutes / 60);

			let text = "";
			if (hours > 0) {
				text = `${hours} hours`;
			}

			if (mins > 0) {
				if (text.length > 0) {
					text += " and ";
				}

				text += `${mins} minutes`;
			}

			return (text.length === 0) ? "No time!" : text;
		},

		remove(index){
			this.items.splice(index, 1);
			this.updateTimes(index);
		},

		autoAssign(){
			Swal.fire({
				title: 'ARE YOU SURE?',
				icon: 'question',
				html: `
					<p>Are you sure you wish to auto-assign the schedule for this event?</p>
					<p>Any already assigned schedule items will be removed.</p>
				`,
				showCancelButton: true,
				customClass: {
					confirmButton: 'btn btn-lg btn-success mx-3',
					cancelButton: 'btn btn-lg btn-danger mx-3'
				},
				buttonsStyling: false,
				reverseButtons: true,
				confirmButtonText: 'Yes, auto-assign this schedule'
			}).then(res => {
				if (res.isConfirmed) {
					this.assignDivisions();
				}
			})
		},

		loadDivisions(){
			return fetch(`/_api/event/${this.event.id}`).then(res => res.json()).then(json => {
				this.entries = {};
				this.divisions = [];

				json.registration.forEach(r => {
					const divisionName = r.Division ? r.Division.Name : 'Unknown';

					if (!this.entries[divisionName]) {
						this.entries[divisionName] = [r];

						if(r.Division){
							this.divisions.push(r.Division)
						} else {
							this.divisions.push({
								id: null,
								Name: 'Unknown',
								PerformanceTime: 20
							});
						}
					} else {
						this.entries[divisionName].push(r);
					}
				});
			});
		},

		generateSchedule(){
			console.log(this.generationType);
			console.log(this.divisions);
		},

		chooseDivisions(){
			this.modal.show();
		},

		assignDivisions(){
			this.loadDivisions().then(this.chooseDivisions);
		},

		changeDivision(index, movement){
			const newPos = index + movement;
			const el = this.divisions.splice(index, 1)[0];
			this.divisions.splice(newPos, 0, el);
		}
	},
	mounted: function() {
		this.start = new Date(this.event.Start);
		this.end = new Date(this.event.End);

		for (let i = 0; i < this.items.length; i++) {
			this.calcDuration(i);
		}

		this.modal = new bootstrap.Modal('#divisionModal', {
			keyboard: false,
			backdrop: 'static'
		});
	}
	});

	function doTime(date, time) {
		const parts = time.split(":");
		if (parts.length < 2) {
			return date;
		}

		date.setHours(parts[0]);
		date.setMinutes(parts[1]);
		date.setSeconds(0);

		return date;
	}

	function scroll() {
		const el = document.getElementById(`item-${id}`);
		const rect = el.getBoundingClientRect();
		if (!(rect.top >= 0 && rect.left >= 0 &&
			rect.bottom <= (window.innerHeight || document.documentElement.clientHeight)
			&& rect.right <= (window.innerWidth || document.documentElement.clientWidth)
		)) {
			el.scrollIntoView({
				behavior: 'smooth'
			});
		}
	}
</script>